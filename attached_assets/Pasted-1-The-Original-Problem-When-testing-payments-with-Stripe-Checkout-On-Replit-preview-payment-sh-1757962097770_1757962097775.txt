1. The Original Problem

When testing payments with Stripe Checkout:

On Replit preview ‚Üí payment showed Stripe UI and sometimes worked.

On the public deployed URL (https://onedollara.replit.app/payment) ‚Üí it failed with:

PAYMENT_GATEWAY_ERROR
Liberation payment gateway initialization failed
RETRY


After a successful charge, Stripe sometimes redirected to:

http://localhost:5000/success?session_id=cs_live_...


instead of the correct deployed domain.

This happened because the system was generating localhost or Replit internal URLs (like kirk.replit.dev) instead of the public domain (onedollara.replit.app) for Stripe success/cancel URLs.

2. Root Causes Identified

getBaseUrl() issue

The function returned Replit internal preview URLs (like kirk.replit.dev) or localhost instead of the correct production domain.

Environment confusion

Logs showed NODE_ENV=development but some production-like behavior was hacked in to avoid Vite restart loops.

This mismatch caused inconsistent URL generation.

Host header security problems

The server trusted client-supplied Host headers.

This made redirects unreliable and insecure.

HTTPS enforcement gaps

Not all environments forced HTTPS, which broke redirects when Stripe expected secure URLs.

3. Fixes Our Dev Implemented
‚úÖ Step 1: Enhanced getBaseUrl()

Added a production-ready version that:

Forces https:// for replit.app and onedollaragent.ai.

Rejects localhost when NODE_ENV=production.

Validates host headers to prevent spoofing.

‚úÖ Step 2: Improved Error Handling & Logging

Added logging for:

Successful session creation (‚úÖ Checkout session created:).

Stripe failures (‚ùå Stripe session creation failed:).

Host validation errors.

‚úÖ Step 3: Fixed Host Header Validation

First attempt was too strict (blocked Replit subdomains).

Updated regex to allow Replit‚Äôs domains and local testing with ports:

/^[a-z0-9.-]+(:[0-9]+)?$/i

‚úÖ Step 4: Environment Configuration

Stripe initialized correctly with live keys.

Server now runs with production-oriented settings.

Redis errors fall back to in-memory store (non-blocking).

4. Current Status

üéâ Stripe payment session creation works end-to-end.

üéâ No more PAYMENT_GATEWAY_ERROR.

üéâ Success/cancel URLs are now generated as proper HTTPS links.

üéâ Logs show clean success flow:

‚úÖ Stripe session created: cs_live_xxxxx
‚úÖ HTTP 200 POST /api/create-checkout-session


‚ö†Ô∏è Redis still falls back to memory (ok for now).

‚ö†Ô∏è Environment variables (FRONTEND_URL, NODE_ENV) need to be finalized before going live on the custom domain (www.onedollaragent.ai).

‚ö†Ô∏è Webhook endpoint (/webhook) must be tested with Stripe CLI or dashboard to ensure live payment events sync properly.

5. Next Steps

Finalize Env Vars

NODE_ENV=production

FRONTEND_URL=https://onedollara.replit.app (later https://www.onedollaragent.ai)

Webhook Setup

Configure Stripe Dashboard ‚Üí https://onedollara.replit.app/webhook

Test with stripe trigger payment_intent.succeeded

Custom Domain Migration

Once stable, update FRONTEND_URL to https://www.onedollaragent.ai.

Ensure SSL & DNS are properly configured.

‚úÖ In summary:
The original problem was caused by incorrect base URL detection, environment mismatches, and weak host validation. Our dev implemented a production-ready getBaseUrl(), stronger host validation, HTTPS enforcement, and robust logging. Stripe payments now work in the preview and should work on the deployed URL, with final adjustments needed for environment variables and webhook testing before moving to the custom domain.